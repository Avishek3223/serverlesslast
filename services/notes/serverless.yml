service: notes-api

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  stage: ${opt:stage, self:provider.stage}
  sstApp: ${self:custom.stage}-notes-infra

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

  environment:
    stripeSecretKey: sk_test_51NH2tdSAC2hJa9B0NvVqNFGzCElzodNMkElGM1IjP84oBf7vKQalcu7c8De0SwwQIRwhLClbnhrGPU0GTAlcUCpp00woqW8w3H 
    tableName: !ImportValue '${self:custom.sstApp}-TableName'

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
          Resource:
            - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
